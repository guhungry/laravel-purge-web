{"version":3,"sources":["logo.svg","components/common/Text/styles.js","components/common/Text/index.js","components/common/Link/styles.js","components/common/Link/index.js","components/common/Dropdown/styles.js","components/common/Dropdown/index.js","components/pages/Home/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","Text_styles","text","fontSize","color","bold","fontWeight","h1","h2","marginTop","link","borderBottomColor","borderBottomWidth","borderBottomStyle","Text","props","style","rest","Object","objectWithoutProperties","react_default","a","createElement","exports_Text","assign","styles","Link_styles","margins","marginVertical","textDecoration","Link","View","esm","OutboundLink","common_Text","children","Dropdown_styles","container","alignItems","paddingHorizontal","title","fontStyle","Dropdown","Picker","R","item","Item","key","label","value","items","Home","_useState","useState","_useState2","slicedToArray","releases","setReleases","_useState3","_useState4","fromRelease","setFromRelease","_useState5","_useState6","toRelease","setToRelease","fetchReleases","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","stop","apply","this","arguments","useEffect","className","role","aria-label","flexDirection","src","logo","alt","react_github_btn","href","data-icon","data-size","data-show-count","common_Dropdown","selectedValue","onValueChange","semver","gt","common_Link","to","concat","eventLabel","position","bottom","right","App","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ed4e890.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\n  text: {\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white'\n  },\n  bold: { fontWeight: 'bold' },\n  h1: { fontSize: 'calc(30px + 2vmin)', fontWeight: 'bold' },\n  h2: {\n    fontSize: 'calc(20px + 2vmin)',\n    fontWeight: 'bold',\n    marginTop: '20px'\n  },\n  link: {\n    borderBottomColor: 'white',\n    borderBottomWidth: '1px',\n    borderBottomStyle: 'solid'\n  }\n}\n","import React from 'react'\nimport { Text as RText } from 'react-native-web'\n\nimport styles from './styles'\n\nconst Text = props => {\n  const { h1, h2, bold, link, style, ...rest } = props\n\n  return (\n    <RText\n      style={[\n        styles.text,\n        bold && styles.bold,\n        h1 && styles.h1,\n        h2 && styles.h2,\n        link && styles.link,\n        style\n      ]}\n      {...rest}\n    />\n  )\n}\n\nexport default Text\n","export default {\n  margins: { marginVertical: '4px' },\n  link: { textDecoration: 'none' }\n}\n","import React from 'react'\nimport { View } from 'react-native-web'\nimport ReactGA from 'react-ga'\n\nimport styles from './styles'\nimport Text from '../Text'\n\nconst Link = props => {\n  const { margins } = props\n  return (\n    <View style={[margins && styles.margins]}>\n      <ReactGA.OutboundLink style={styles.link} {...props}>\n        <Text link>{props.children}</Text>\n      </ReactGA.OutboundLink>\n    </View>\n  )\n}\n\nexport default Link\n","export default {\n  container: {\n    alignItems: 'flex-start',\n    paddingHorizontal: '8px'\n  },\n  title: { fontStyle: 'italic' }\n}\n","import React from 'react'\nimport { Picker, View } from 'react-native-web'\nimport * as R from 'ramda'\n\nimport styles from './styles'\nimport Text from '../Text'\n\nconst Dropdown = props => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{props.title}</Text>\n      <Picker {...props}>\n        {R.map(item => <Picker.Item key={item} label={item} value={item} />)(\n          props.items\n        )}\n      </Picker>\n    </View>\n  )\n}\n\nexport default Dropdown\n","import React, { useEffect, useState } from 'react'\nimport { View } from 'react-native-web'\nimport * as R from 'ramda'\nimport GitHubButton from 'react-github-btn'\nimport semver from 'semver'\n// import ReactGA from 'react-ga'\n\nimport logo from '../../../logo.svg'\nimport './styles.css'\n\nimport { Text, Dropdown, Link } from '../../common'\n\nconst Home = props => {\n  const [releases, setReleases] = useState([])\n  const [fromRelease, setFromRelease] = useState('')\n  const [toRelease, setToRelease] = useState('')\n\n  const fetchReleases = async () => {\n    const response = await fetch(\n      'https://raw.githubusercontent.com/guhungry/laravel-diff-purge/master/RELEASES'\n    )\n    const text = await response.text()\n    const releases = R.split('\\n')(text)\n    setReleases(releases)\n    setFromRelease(releases[1])\n    setToRelease(releases[0])\n  }\n\n  useEffect(() => {\n    fetchReleases()\n  }, [])\n\n  useEffect(() => {\n    //ReactGA.initialize('UA-136307971-1')\n    //ReactGA.pageview('/')\n  }, [])\n\n  return (\n    <div className=\"Home\">\n      <header className=\"Home-header\">\n        <Text h1>Upgrade your React Native apps <span role='img' aria-label='party popper'>ðŸŽ‰</span></Text>\n        <View style={{ flexDirection: 'row' }}>\n          <Text>powered by </Text>\n          <Text bold>laravel-diff-purge</Text>\n        </View>\n        <img src={logo} className=\"Home-logo\" alt=\"logo\" />\n        <GitHubButton\n          href=\"https://github.com/guhungry/laravel-diff-purge\"\n          data-icon=\"octicon-star\"\n          data-size=\"large\"\n          data-show-count=\"true\"\n          aria-label=\"Star guhungry/laravel-diff-purge on GitHub\"\n        >\n          Star\n        </GitHubButton>\n        <Text h2>Get diff</Text>\n        <View style={{ flexDirection: 'row', marginVertical: '30px' }}>\n          <Dropdown\n            title=\"From:\"\n            items={releases}\n            selectedValue={fromRelease}\n            onValueChange={setFromRelease}\n          />\n          <Dropdown\n            title=\"To:\"\n            items={releases}\n            selectedValue={toRelease}\n            onValueChange={setToRelease}\n          />\n        </View>\n        <View style={{ flexDirection: 'column' }}>\n          {toRelease !== '' && semver.gt(fromRelease, toRelease) && (\n            <Text style={{ color: 'orange' }}>\n              You are downgrading. Are you sure?\n            </Text>\n          )}\n          <Link\n            margins\n            to={`https://github.com/guhungry/laravel-diff-purge/compare/release/${fromRelease}..release/${toRelease}`}\n            eventLabel={`diff--${fromRelease}--${toRelease}`}\n          >\n            Diff here\n          </Link>\n          <Link\n            margins\n            to={`https://raw.githubusercontent.com/guhungry/laravel-diff-purge/diffs/diffs/${fromRelease}..${toRelease}.diff`}\n            eventLabel={`patch--${fromRelease}--${toRelease}`}\n          >\n            Patch here\n          </Link>\n        </View>\n        <View\n          style={{\n            position: 'absolute',\n            bottom: '8px',\n            right: '8px',\n            flexDirection: 'row'\n          }}\n        >\n          <Text>made with <span role='img' aria-label='love'>ðŸ’œ</span> by </Text>\n          <Text bold>pvinis</Text>\n          <Text> (</Text>\n          <Link to=\"https://github.com/pvinis\" eventLabel=\"github--pvinis\">\n            github\n          </Link>\n          <Text>, </Text>\n          <Link to=\"https://twitter.com/pvinis\" eventLabel=\"twitter--pvinis\">\n            twitter\n          </Link>\n          <Text>)</Text>\n        </View>\n      </header>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Home } from './components/pages'\n\nconst App = props => <Home />\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}